name: PR
on:
  pull_request:
    branches:
      - latest
jobs:
  pr:
    name: CD
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # copy/pasta: https://github.com/google-github-actions/setup-gcloud#service-account-key-json 
      - id: 'auth'
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v1'
      - name: 'Use gcloud CLI'
        run: 'gcloud info'

      - name: Deploy to staging
        id: deploy
        env:
          VERSION: ${{ github.event.pull_request.number }}
          PROJECT: crucial-alpha-706
        run: |
          gcloud app deploy --version pr-$VERSION --project $PROJECT --no-promote --quiet
          RES=`gcloud app browse --project=$PROJECT --version=pr-$VERSION 2>&1 | tail -n 1`
          echo "url=$RES" >> $GITHUB_OUTPUT

      # Run an integration suite against the deployed service
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'
      - name: Integration
        env:
          ADDRESS: ${{ steps.deploy.outputs.url }}
        run: go test . -v -target $ADDRESS

      # See: https://octokit.github.io/rest.js/
      - uses: actions/github-script@v6
        env:
          ADDRESS: ${{ steps.deploy.outputs.url }}
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const body = 'Deployed to ' + process.env.ADDRESS + ' for manual testing.'
            console.log(body, context)

            const comments = await github.paginate(github.rest.issues.listComments, {
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo
            })

            // Try to find/update an existing comment
            for (const comment of comments) {
              if (comment.body.startsWith('Deployed to ')) {
                await github.rest.issues.updateComment({
                  comment_id: comment.id,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: body + '\n\nUpdated with: ' + context.payload.after,
                })
                return;
              }
            }

            // Create a new one
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body,
            })
